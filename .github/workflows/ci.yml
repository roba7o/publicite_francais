name: CI

on:
  pull_request:
    branches: [ main, develop ]

jobs:
  # Fast tests without database
  test-unit:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.12]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]

    - name: Run code quality checks
      run: |
        python -m ruff check --fix src tests

    - name: Run essential tests (no database)
      run: |
        PYTHONPATH=src python -m pytest tests/test_essential.py -v

  # Integration tests with database
  test-integration:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:17-alpine
        env:
          POSTGRES_PASSWORD: ci_test_password_123
          POSTGRES_USER: news_user
          POSTGRES_DB: french_news
        options: >-
          --health-cmd "pg_isready -U news_user -d french_news"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: 3.12

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]

    - name: Set up test database schema
      run: |
        PGPASSWORD=ci_test_password_123 psql -h localhost -U news_user -d french_news -f database/test_schema.sql

    - name: Run integration tests (database + scraper, no dbt)
      env:
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432
        POSTGRES_DB: french_news
        POSTGRES_USER: news_user
        POSTGRES_PASSWORD: ci_test_password_123
        DATABASE_ENV: test
        DEBUG: true
        OFFLINE: true
      run: |
        PYTHONPATH=src python -m pytest tests/test_database_connection.py tests/test_deterministic_pipeline.py::TestDeterministicPipeline::test_html_file_counts tests/test_deterministic_pipeline.py::TestDeterministicPipeline::test_database_article_extraction -v

  # Container build tests - Critical for catching missing file issues
  test-containers:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Create .env file for container builds
      run: |
        cat > .env << 'EOF'
        POSTGRES_HOST=localhost
        POSTGRES_PORT=5432
        POSTGRES_DB=french_news
        POSTGRES_USER=news_user
        POSTGRES_PASSWORD=ci_container_test_password
        DEBUG=true
        OFFLINE=true
        DATABASE_ENV=test
        EOF

    - name: Test container builds (catch missing files early)
      run: |
        echo "Testing all Docker container builds..."
        docker compose build --quiet app || (echo "App container build failed!" && exit 1)
        docker compose build --quiet dbt || (echo "dbt container build failed!" && exit 1)
        echo "All containers build successfully"

    - name: Test container health checks
      run: |
        echo "Starting containers with health checks..."
        docker compose up -d postgres
        
        # Wait for postgres to be healthy
        echo "Waiting for postgres health check..."
        timeout 60s bash -c 'until docker compose ps postgres --format json | jq -r ".Health" | grep -q "healthy"; do sleep 2; done'
        
        # Test app container can start
        echo "Testing app container startup..."
        timeout 30s docker compose run --rm app python -c "import sys; sys.path.insert(0, '/app/src'); from main import main; print('App container health: OK')" || (echo "App container startup failed!" && exit 1)

        # Test dbt container can connect
        echo "Testing dbt container connection..."
        timeout 30s docker compose run --rm dbt dbt debug || (echo "dbt container connection failed!" && exit 1)
        
        echo "All container health checks passed"

    - name: Cleanup containers
      if: always()
      run: |
        docker compose down -v
        docker system prune -f


